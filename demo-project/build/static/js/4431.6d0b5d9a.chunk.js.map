{"version":3,"file":"static/js/4431.6d0b5d9a.chunk.js","mappings":"mRAQA,MA8DA,EA9DmBA,KACf,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,OACT,QAAEC,EAAO,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,SAG1DC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IAe3C,OANAC,EAAAA,EAAAA,YAAU,KACFP,GACAQ,EAAAA,GAAMR,MAAMA,EAChB,GACD,CAACA,IAEAF,GAAgBW,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,sBAG7BF,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAIC,UACrCC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAW,EAAGC,MAAO,CAAEC,QAAS,OAAQC,UAAW,QAASN,SAAA,EAC/DN,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,WAAW,SAAQR,UACtBN,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACX,UAAU,KAAKY,QAAQ,KAAIV,SAAC,mBAI5CC,EAAAA,EAAAA,MAAA,QAAMU,SAvBEC,UAChBC,EAAEC,iBACFnC,ECGmBU,IAAcuB,UACvC,IACEjC,EAAS,CAAEoC,KAAMC,EAAAA,KAEjB,MAAMC,EAAS,CACbC,iBAAiB,EACjBC,QAAS,CACP,eAAgB,sBAId,KAAEC,SAAeC,EAAAA,EAAcC,KAAK,eAAgB,CAAEjC,aAAa4B,GAEzEtC,EAAS,CACPoC,KAAMQ,EAAAA,GACNC,QAASJ,GAEb,CAAE,MAAOnC,GAAQ,IAADwC,EAAAC,EACd/C,EAAS,CACPoC,KAAMY,EAAAA,GACNH,SAAuB,QAAdC,EAAAxC,EAAM2C,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBL,YAAI,IAAAM,OAAN,EAAdA,EAAsBG,UAAW,kCAE9C,GDzBeC,CAAWzC,IACpBR,EAAS,mBAAmB,EAoBSuB,MAAO,CAAEE,UAAW,QAASN,SAAA,EACtDN,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,CACNrB,QAAQ,WACRsB,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,KAAK,YACLC,MAAM,aACNrB,KAAK,WACLsB,GAAG,YACHC,aAAa,mBACbC,MAAOlD,EACPmD,SAAW3B,GAAMvB,EAAauB,EAAE4B,OAAOF,UAE3C7C,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CACH3B,KAAK,SACLmB,WAAS,EACTxB,QAAQ,YACRiC,MAAM,UACNvC,MAAO,CAAE4B,OAAQ,eACjBY,SAAU5D,EAAQgB,SAEjBhB,EAAU,gBAAkB,mBAKjC,C","sources":["pages/Admin/AdminLogin.jsx","actions/adminAction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Paper, TextField, Button, Typography, Stack } from \"@mui/material\";\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { adminLogin } from '../../actions/adminAction'; \r\nimport { toast} from 'react-toastify';\r\n\r\n\r\nconst AdminLogin = () => {\r\n    const dispatch = useDispatch();\r\n    const navigate=useNavigate()\r\n    const { isAdmin, loading, error } = useSelector((state) => state.admin);\r\n\r\n    // State for the secret key\r\n    const [secretKey, setSecretKey] = useState(\"\");\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        dispatch(adminLogin(secretKey));\r\n        navigate(\"/admin/dashboard\")\r\n    };\r\n\r\n    // Show error or success messages\r\n    useEffect(() => {\r\n        if (error) {\r\n            toast.error(error);\r\n        }\r\n    }, [error]);\r\n\r\n    if (isAdmin) return <Navigate to=\"/admin/dashboard\" />;\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <Paper elevation={3} style={{ padding: '20px', marginTop: '50px' }}>\r\n                <Stack alignItems=\"center\">\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Admin Login\r\n                    </Typography>\r\n                </Stack>\r\n                <form onSubmit={handleLogin} style={{ marginTop: '20px' }}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"secretKey\"\r\n                        label=\"Secret Key\"\r\n                        type=\"password\" // Use \"text\" if you don't want to mask the input\r\n                        id=\"secretKey\"\r\n                        autoComplete=\"current-password\"\r\n                        value={secretKey}\r\n                        onChange={(e) => setSecretKey(e.target.value)} // Directly update state\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ margin: '20px 0 10px' }}\r\n                        disabled={loading}\r\n                    >\r\n                        {loading ? 'Signing In...' : 'Sign In'}\r\n                    </Button>\r\n                </form>\r\n            </Paper>\r\n          \r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default AdminLogin;\r\n","import axiosInstance from \"../utlis/axios\";\r\nimport {\r\n  ADMIN_LOGIN_REQUEST,\r\n  ADMIN_LOGIN_SUCCESS,\r\n  ADMIN_LOGIN_FAIL,\r\n  ALL_USERS_REQUEST,\r\n  ALL_USERS_SUCCESS,\r\n  ALL_USERS_FAIL,\r\n  ALL_CHATS_REQUEST,\r\n  ALL_CHATS_SUCCESS,\r\n  ALL_CHATS_FAIL,\r\n  ALL_POSTS_REQUEST,\r\n  ALL_POSTS_SUCCESS,\r\n  ALL_POSTS_FAIL,\r\n  ALL_MESSAGES_REQUEST,\r\n  ALL_MESSAGES_SUCCESS,\r\n  ALL_MESSAGES_FAIL,\r\n  CLEAR_ERRORS,\r\n} from '../constant/adminConstant';\r\n\r\n// Admin Login Action\r\nexport const adminLogin = (secretKey) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ADMIN_LOGIN_REQUEST });\r\n\r\n    const config = {\r\n      withCredentials: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const { data } = await axiosInstance.post('/admin/login', { secretKey }, config);\r\n\r\n    dispatch({\r\n      type: ADMIN_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ADMIN_LOGIN_FAIL,\r\n      payload: error.response?.data?.message || 'An error occurred during login',\r\n    });\r\n  }\r\n};\r\n\r\n// Fetch All Users\r\nexport const fetchAdminAllUsers = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_USERS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get('/admin/users');\r\n\r\n    dispatch({\r\n      type: ALL_USERS_SUCCESS,\r\n      payload: data.users, // Adjust based on actual API structure\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_USERS_FAIL,\r\n      payload: error.response?.data?.message || 'An error occurred while fetching users',\r\n    });\r\n  }\r\n};\r\n\r\n// Fetch All Chats\r\nexport const fetchAdminAllChats = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_CHATS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get('/admin/chats');\r\n\r\n    dispatch({\r\n      type: ALL_CHATS_SUCCESS,\r\n      payload: data.transformedChats, // Adjust based on actual API structure\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_CHATS_FAIL,\r\n      payload: error.response?.data?.message || 'An error occurred while fetching chats',\r\n    });\r\n  }\r\n};\r\n\r\n// Fetch All Posts\r\nexport const fetchAdminAllPosts = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_POSTS_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get('/admin/posts');\r\n\r\n    dispatch({\r\n      type: ALL_POSTS_SUCCESS,\r\n      payload: data.posts, // Adjust based on actual API structure\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_POSTS_FAIL,\r\n      payload: error.response?.data?.message || 'An error occurred while fetching posts',\r\n    });\r\n  }\r\n};\r\n\r\n// Fetch All Messages\r\nexport const fetchAdminAllMessages = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: ALL_MESSAGES_REQUEST });\r\n\r\n    const { data } = await axiosInstance.get('/admin/messages');\r\n\r\n    dispatch({\r\n      type: ALL_MESSAGES_SUCCESS,\r\n      payload: data.transformedMessages, // Adjust based on actual API structure\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_MESSAGES_FAIL,\r\n      payload: error.response?.data?.message || 'An error occurred while fetching messages',\r\n    });\r\n  }\r\n};\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => (dispatch) => {\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};\r\n"],"names":["AdminLogin","dispatch","useDispatch","navigate","useNavigate","isAdmin","loading","error","useSelector","state","admin","secretKey","setSecretKey","useState","useEffect","toast","_jsx","Navigate","to","Container","component","maxWidth","children","_jsxs","Paper","elevation","style","padding","marginTop","Stack","alignItems","Typography","variant","onSubmit","async","e","preventDefault","type","ADMIN_LOGIN_REQUEST","config","withCredentials","headers","data","axiosInstance","post","ADMIN_LOGIN_SUCCESS","payload","_error$response","_error$response$data","ADMIN_LOGIN_FAIL","response","message","adminLogin","TextField","margin","required","fullWidth","name","label","id","autoComplete","value","onChange","target","Button","color","disabled"],"sourceRoot":""}